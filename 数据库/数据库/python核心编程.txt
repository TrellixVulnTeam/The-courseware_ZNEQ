私有化的实现：在变量前前加__（二个下划线）二个下划线的方式来将属性私有
1.以单划线开头 _nam:这种类型的变量可以通过对象.调用，表示的意思是我可以调用，但是请把我视为私有，通过from xxx import * 无法访问，import * 可以访问
2.以双划线开头：__name 就是私有的   会添加get和set的方法
3. __name__ 由特殊意义的变量
4.name_ 用于避免与python关键字进行冲突的解决方法
5. __dict__ 查看对象的属性  包括私有属性和非私有属性

class Person(object):
    def __init__(self,name,age,sex):
        self.name = name
        self.__age = age
        self.sex = sex

    def getAge(self):
        return self.age
    def setAge(self,age):
        self.__age = age
    age = property(getAge,setAge,'this is doc') 参数 get方法，set方法， del方法 ，doc说名

浅拷贝  a=b a和b引用同一个内存地址  优点：节省空间，节约时间    缺点：没有办法保证数据的独立性
深拷贝  copy模块  copy.deepcopy()  重新分配了内存空间，完成把数据复制过来
                  copy.copy()  重新分配了内存空间，开辟了最底层的一片空间，拷贝引用
切片拷贝是浅拷贝
字典的拷贝也是浅拷贝，字典自带一个.copy()
不可变类型（元组）  深拷贝和浅拷贝都不会开辟新的内存空间
                注意点：浅拷贝不管元组中的数据是什么，都不会开辟新的空间
                        深拷贝 如果元组中是可变类型，就会开辟新的内存空间

--------------------------------------------------
并发:交替处理多个任务的能力
并行：同时处理多个任务的能力（多核cpu）
在python中多线程没有办法实现并行  假的多线程（GIL全局解释器锁）
多线程因为有GIL造成了锁，浪费了资源，保证同一时刻只有一个线程使用cpu
GIL遇到IO阻塞自动释放，所以多线程适用场景是IO阻塞
解决方案GIL：1.更换解释器
            2.使用c语言

----------------------------------------------
import 搜索路径  sys.path------>列表
                 sys.insert()
                 from imp import reload   
                 reload(xxx)    解决模块重新导入的问题
        多模块开发公共变量用 import 而不要使用from.import * 


多态的发生条件：1.继承，2.方法重写，3.调用被重写的方法

ctrl + alt + L

多继承
 super().__init__(name,*arggs,**kwargs)  mro顺序表，继承中根据mro顺序表去调用父类
super(Parent,self).__init(name,xx)不会按照mro顺序表去调用父类，会重复重复调用父类
单继承中使用super(Parent,self).__init(name,xx)
多继承中使用super().__init__(name,*arggs,**kwargs) 

类对象  存放类相关的数据空间
实例对象  存放实例相关的数据的空间

类属性   存放在类空间中的属性
实例属性  存放在实例空间中的属性

类方法 改变类属性（默认是类空间的地址）
实例方法 改变实例属性
静态方法  谁也不改变

property属性
  定义的时候用函数一样，使用的时候像属性一样
  作用：简化私有属性的修改和调用的流程，property属性内部进行一系列逻辑运算，最终将数据返回
  @property定义的函数必须返回一个值，

